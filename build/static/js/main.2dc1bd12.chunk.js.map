{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","client","ApolloClient","uri","cache","InMemoryCache","helloQuery","gql","_templateObject","LambdaDemo","_useState","useState","_useState2","Object","slicedToArray","loading","setLoading","_useState3","_useState4","message","handleClick","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","response","wrap","_context","prev","next","query","sent","console","log","abrupt","t0","stop","apply","this","arguments","react_default","createElement","onClick","App","className","src","logo","alt","App_LambdaDemo","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,wXCQxC,IAAMC,EAAS,IAAIC,IAAa,CAC9BC,IAAK,8BACLC,MAAO,IAAIC,kBAGPC,EAAaC,cAAHC,KAMVC,EAAa,WAAM,IAAAC,EACOC,oBAAS,GADhBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAChBK,EADgBH,EAAA,GACPI,EADOJ,EAAA,GAAAK,EAEON,mBAAS,MAFhBO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAEhBE,EAFgBD,EAAA,GAIjBE,GAJiBF,EAAA,GAIN,eAAAG,EAAAR,OAAAS,EAAA,EAAAT,CAAAU,EAAAC,EAAAC,KAAG,SAAAC,IAAA,IAAAC,EAAA,OAAAJ,EAAAC,EAAAI,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAC,KAAA,EAEhBd,GAAW,GAFKa,EAAAE,KAAA,EAQO9B,EAAO+B,MAAM,CAClCA,MAAO1B,IATO,cAQVqB,EARUE,EAAAI,KAYhBC,QAAQC,IAAIR,GAZIE,EAAAO,OAAA,SAcT,MAdS,cAAAP,EAAAC,KAAA,EAAAD,EAAAQ,GAAAR,EAAA,SAAAA,EAAAO,OAAA,SAmBT,MAnBS,yBAAAP,EAAAS,SAAAZ,EAAA,iBAAH,yBAAAL,EAAAkB,MAAAC,KAAAC,YAAA,IAuBjB,OACEC,EAAAlB,EAAAmB,cAAA,WACED,EAAAlB,EAAAmB,cAAA,UAAQC,QAAS,kBAAMxB,MACpBL,EAAU,aAAe,eAE5B2B,EAAAlB,EAAAmB,cAAA,WACAD,EAAAlB,EAAAmB,cAAA,YAAOxB,KAgBE0B,EAXH,WACV,OACEH,EAAAlB,EAAAmB,cAAA,OAAKG,UAAU,OACbJ,EAAAlB,EAAAmB,cAAA,UAAQG,UAAU,cAChBJ,EAAAlB,EAAAmB,cAAA,OAAKI,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzCP,EAAAlB,EAAAmB,cAACO,EAAD,SCpDYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAOf,EAAAlB,EAAAmB,cAACe,EAAD,MAASC,SAASC,eAAe,SDmH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.2dc1bd12.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState } from 'react'\nimport ApolloClient from 'apollo-boost'\nimport { gql, InMemoryCache } from '@apollo/client'\n\nimport './App.css'\n\nimport logo from './logo.svg'\n\nconst client = new ApolloClient({\n  uri: '/.netlify/functions/graphql',\n  cache: new InMemoryCache()\n})\n\nconst helloQuery = gql`\n  query {\n    hello\n  }\n`\n\nconst LambdaDemo = () => {\n  const [loading, setLoading] = useState(false)\n  const [message, setMessage] = useState(null)\n\n  const handleClick = async () => {\n    try {\n      setLoading(true)\n\n      // const response = await fetch('/.netlify/functions/graphql')\n      // const { url } = response\n      // const newMessage = url || 'Ha ocurrido un error, vuelva a intentarlo.'\n\n      const response = await client.query({\n        query: helloQuery\n      })\n\n      console.log(response)\n\n      return null\n\n      // setMessage(newMessage)\n      // setLoading(false)\n    } catch (error) {\n      return null\n    }\n  }\n\n  return (\n    <div>\n      <button onClick={() => handleClick()}>\n        {loading ? 'Loading...' : 'Call Lambda'}\n      </button>\n      <br />\n      <span>{message}</span>\n    </div>\n  )\n}\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <LambdaDemo />\n      </header>\n    </div>\n  )\n}\n\nexport default App\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}